;;; gencache.el --- 

;; Copyright (C) 2011  Seong-Kook Shin

;; Author: Seong-Kook Shin <cinsky@gmail.com>
;; Keywords: 

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; In my first implementation, I used to generate "lunar-ko-cache.el"
;; using a Ruby script, since Ruby does have support for sqlite3
;; database.  In that implementation, I generate (julian . kld) pair
;; where JULIAN is the Astronomical Julian Day(AJD) number, and KLD is
;; the numerical representation of Korean lunar date.
;;
;; Unfortunately, the Emacs algorithm that convert Gregorian date to
;; julian day number is different from that of Ruby.  For example,
;;
;; Gregorian  Emacs AJD Ruby AJD
;; ---------- --------- ---------
;; 1582-10-04 2299149.5 2299159.5
;; 1582-10-05 2299150.5 N/A
;; ...        ...       N/A
;; 1582-10-14 2299159.5 N/A
;; 1582-10-15 2299160.5 2299160.5
;;
;; (Note that Gregorian calendar starts from 1582-10-15.)
;;
;; Thus, I first create intermediate file using Ruby to read sqlite3
;; database, then using Emacs lisp to generate "lunar-ko-cache.el".

;;; Code:

(require 'calendar)

;; To run:
;;
;; $ emacs -q -L . -l gencache --batch \
;;   -f lunar-ko-generate-cache "./script/cache.dat" "cache.el"
;;
;; See "Rakefile" for more.

;
; TODO: consult `batch-byte-compile' and modify
; `lunar-ko-generate-cache' so that it can get the arguments from
; command line.
;

(defun gregorian-to-julian (date)
  "Convert gregorian date in the form of (MONTH DAY YEAR) to
Julian day number.  See also `calendar-astro-date-string'."
  (calendar-astro-from-absolute
   (calendar-absolute-from-gregorian date)))

(defvar cache-header
  (format ";;; lunar-ko-cache.el --- cache data for Korean lunar calendar

;; Automatically generated by gencache.el in %s

(defconst korean-lunar-cache
  [" (current-time-string))
  "cache header")

(defvar cache-tail
  "]
\"Solar to Korean lunar cache\")

(provide 'lunar-ko-cache)"
  "cache tail")

(defun lunar-ko-generate-cache (&optional srcfile outfile)
  (let ((coding-system-for-read 'utf-8)
        (coding-system-for-write 'utf-8))
    (if (and noninteractive
             (consp command-line-args-left)
             (> (length command-line-args-left) 0))
        (setq srcfile (car command-line-args-left)
              outfile (cadr command-line-args-left)))
    (let* ((srcpath (expand-file-name srcfile))
           (outpath (expand-file-name 
                     (or outfile
                         (replace-regexp-in-string
                          "\\.[^.]*$" ".el" srcfile)))))
      ;;(message "srcpath: %s" srcpath)
      ;;(message "outpath: %s" outpath)
      ;;(message "args: %S" command-line-args-left)

      (if (not (file-readable-p srcpath))
          (error "error: cannot find %s" srcpath))
      (let ((srcbuf (find-file-noselect srcpath t))
            (outbuf (create-file-buffer outpath)))
        (save-current-buffer
          (set-buffer outbuf)
          (setq buffer-file-name outpath)
          ;;(setq buffer-file-coding-system 'utf-8)
          ;;(set-buffer-multibyte t)
          (emacs-lisp-mode)
          (insert cache-header))
        (save-current-buffer
          (set-buffer srcbuf)
          (goto-char (point-min))
          (while (search-forward-regexp
                  "^\\([0-9]*\\)-\\([0-9]*\\)-\\([0-9]*\\) \\([0-9]*\\) \\(.*\\)$"
                  nil t)
            (let ((year (string-to-number (match-string-no-properties 1)))
                  (month (string-to-number (match-string-no-properties 2)))
                  (day (string-to-number (match-string-no-properties 3)))
                  (lunar (match-string-no-properties 4))
                  (text (string-to-multibyte (match-string-no-properties 5))))
              (if (string-match "???001001$" lunar)
                  (message "Generating cache for ..%d.." year))
              (save-current-buffer
                (set-buffer outbuf)
                (goto-char (point-max))
                (let ((date (list month day year)))
                  (indent-according-to-mode)
                  (insert (format "(%.1f . %s)  ; %s\n"
                                  (gregorian-to-julian date)
                                  lunar text)))))))
        (save-current-buffer
          (set-buffer outbuf)
          (goto-char (point-max))
          (insert cache-tail)
          (save-buffer))
        (when nil
          (kill-buffer srcbuf)
          (kill-buffer outbuf))
        ))))


(provide 'gencache)
;;; gencache.el ends here
